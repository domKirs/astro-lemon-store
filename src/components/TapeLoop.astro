---
const { class: classList, ...attr } = Astro.props;
---

<tape-loop class:list={['is-animated', classList]} {...attr}>
  <tape-element >
    <span class="word">Easy</span>

    <svg
      class="snippet--ticker-shape"
      width="19"
      height="19"
      viewBox="0 0 19 19"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0.199219 0.637695H9.25853C14.2619 0.637695 18.3179 4.69369 18.3179 9.69701C18.3179 14.7003 14.2619 18.7563 9.25853 18.7563C4.25521 18.7563 0.199219 14.7003 0.199219 9.69701V0.637695Z"
        fill="white"></path>
    </svg>

    <span class="word">Peasy</span>

    <svg
      class="snippet--ticker-shape"
      width="26"
      height="24"
      viewBox="0 0 26 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <ellipse
        cx="13.1858"
        cy="17.2961"
        rx="5.85371"
        ry="12.5437"
        transform="rotate(90 13.1858 17.2961)"
        fill="white"></ellipse>
      <ellipse
        cx="13.1858"
        cy="6.70381"
        rx="5.85371"
        ry="12.5437"
        transform="rotate(90 13.1858 6.70381)"
        fill="white"></ellipse>
    </svg>

    <span class="word">Lemon</span>

    <svg
      class="snippet--ticker-shape"
      width="23"
      height="24"
      viewBox="0 0 23 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="11.687" cy="12" r="11.1499" fill="white"></circle>
    </svg>

    <span class="word">Squeezy</span>

    <svg
      class="snippet--ticker-shape"
      width="26"
      height="18"
      viewBox="0 0 26 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M0.393555 17.3626V9.00014C0.393555 3.42518 3.18104 0.637695 7.36226 0.637695C12.9372 0.637697 15.7247 6.21266 19.9059 6.21266C22.6934 6.21266 24.0872 4.81892 24.0872 0.637695H25.4809V9.00014C25.4809 14.5751 22.6934 17.3626 18.5122 17.3626C12.9372 17.3626 10.1497 11.7876 5.96852 11.7876C3.45397 11.7876 1.7873 13.3207 1.7873 17.3626H0.393555Z"
        fill="white"></path>
    </svg>
  </tape-element>
</tape-loop>

<script>
  class TapeLoop extends HTMLElement {
    constructor() {
      super();
      this._biggestInnerWidth = 0;
    }

    get biggestInnerWidth() {
      return this._biggestInnerWidth;
    }

    set biggestInnerWidth(val) {
      this._biggestInnerWidth = val;
    }

    get tapeElement() {
      return this.querySelector("tape-element");
    }

    get tapeElements() {
      return this.querySelectorAll("tape-element");
    }

    get tapeElementScrollWidth() {
      return this.tapeElement.scrollWidth;
    }

    get windowInnerWidth() {
      return window.innerWidth;
    }

    get numberOfAdditionalTapes() {
      return Math.ceil(this.windowInnerWidth / this.tapeElementScrollWidth);
    }

    _toggleIsAnimated() {
      this.classList.toggle('is-animated');
    }

    _appendTapeElement() {
      const tapeElement = document.createElement("tape-element");
      tapeElement.innerHTML = this.tapeElement.innerHTML;
      this.appendChild(tapeElement);
    }

    _onResize() {
      if (this.biggestInnerWidth >= this.windowInnerWidth) return;
      this.biggestInnerWidth = this.windowInnerWidth;
      
      this._toggleIsAnimated();

      const numberOfAdditionalTapes = this.numberOfAdditionalTapes;
      const currentNumberOfTapes = this.tapeElements.length;
      const sub = numberOfAdditionalTapes - currentNumberOfTapes + 1;

      for (let i = 1; i <= sub; i++) {
        this._appendTapeElement();
      }

    }

    _onMutation() {
      this._toggleIsAnimated();
    }

    connectedCallback() {
      this.biggestInnerWidth = this.windowInnerWidth;
      const numberOfAdditionalTapes = this.numberOfAdditionalTapes;

      for (let i = 1; i <= numberOfAdditionalTapes; i++) {
        this._appendTapeElement();
      }

      new ResizeObserver(this._onResize.bind(this)).observe(this);
      new MutationObserver(this._onMutation.bind(this)).observe(this, {childList: true});
    }
  }
  customElements.define("tape-loop", TapeLoop);

  class TapeElement extends HTMLElement {
    constructor() {
      super();
    }
  }
  customElements.define("tape-element", TapeElement);
</script>
